{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/charInfo/CharInfo.jsx","components/charSearchForm/CharSearchForm.jsx","components/errorBoundary/ErrorBoundary.jsx","resources/img/vision.png","components/pages/MainPage.jsx","components/errorMessage/error2.gif","components/errorMessage/ErrorMessage.jsx","services/MarvelService.jsx","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","comics","CharInfo","charId","CharSearchForm","loading","error","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","console","log","this","setState","children","MainPage","selectedChar","Helmet","content","decoration","display","height","margin","img","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices","Skeleton"],"mappings":"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","file":"static/js/6.2ff28d4d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const { getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting': \n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state!')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const { getAllCharacters, process, setProcess,} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n        \n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        \n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    \n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        \n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading)\n    }, [process])\n\n        return (\n            <div className=\"char__list\">\n                {elements}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n        return (\n            <div className=\"char__info\">\n                {setContent(process, View, char)}\n            </div>\n        )\n    }\n\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta \r\n                    name=\"description\"\r\n                    content=\"Marvel information\" \r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <RandomChar/>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharSearchForm/>\r\n                </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error2.7ca5f3f9.gif\";","import img from './error2.gif';\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', height: '260px', margin: '0 auto'}} src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=b1cf6a4b318c6d418a81bafe3326bd44';\r\n    const _baseOffset = 190;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 190)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return { clearError, process, setProcess, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state!')\r\n    }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}